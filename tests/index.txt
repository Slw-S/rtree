.. _index_test:

Examples
..............................................................................

    >>> from rtree import index
    >>> from rtree.index import Rtree


A stream of data need that needs to be an iterator that will raise a 
StopIteration. The order depends on the interleaved kwarg sent to the 
constructor.

The object can be None, but you must put a place holder of 'None' there.

    >>> p = index.Property()
    >>> def data_gen(interleaved=True):
    ...    for i, (minx, miny, maxx, maxy) in enumerate(boxes15):
    ...        if interleaved:
    ...            yield (i, (minx, miny, maxx, maxy), 42)
    ...        else:
    ...            yield (i, (minx, maxx, miny, maxy), 42)

    >>> strm_idx = index.Rtree(data_gen(), properties = p)

    >>> hits = list(strm_idx.intersection((0, 0, 60, 60)))

    >>> len(hits)
    10
    
    
    >>> sorted(hits)
    [0, 4, 16, 27, 35, 40, 47, 50, 76, 80]

    >>> hits = list(strm_idx.intersection((0, 0, 60, 60), objects=True))
    >>> len(hits)
    10
    
    >>> hits[0].object
    42

Try streaming against a persisted index without interleaving.
    >>> strm_idx = index.Rtree('streamed', data_gen(interleaved=False), properties = p, interleaved=False)

Note the arguments to intersection must be xmin, xmax, ymin, ymax for interleaved=False
    >>> hits = list(strm_idx.intersection((0, 60, 0, 60)))
    >>> len(hits)
    10
    
    >>> sorted(hits)
    [0, 4, 16, 27, 35, 40, 47, 50, 76, 80]

    >>> hits = list(strm_idx.intersection((0, 60, 0, 60), objects=True))
    >>> len(hits)
    10
    
    >>> hits[0].object
    42

    >>> hits = list(strm_idx.intersection((0, 60, 0, 60), objects='raw'))
    >>> hits[0]
    42
    >>> len(hits)
    10
    
    >>> strm_idx.count((0, 60, 0, 60))
    10L
    
    >>> del strm_idx

    >>> p = index.Property()
    >>> p.leaf_capacity = 100
    >>> p.fill_factor = 0.5
    >>> p.index_capacity = 10
    >>> p.near_minimum_overlap_factor = 7
    >>> idx = index.Index(data_gen(interleaved=False), properties = p, interleaved=False)

    >>> leaves = idx.leaves()

    >>> del idx
